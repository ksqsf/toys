* =fast_gaussian_blur.c=

=fast_gaussian_blur.c= is an SIMD implementation of Ivan Kutskir's
[[https://blog.ivank.net/fastest-gaussian-blur.html][Fastest Gaussian Blur (in linear time)]].

([[https://gcc.gnu.org/onlinedocs/gcc/Vector-Extensions.html][GCC vector extension]] is pretty nice!)

TABLE: various optimizations and their effects (top = new, bottom = old)

| input file | implementation          | optimizations                     |     time |
|------------+-------------------------+-----------------------------------+----------|
| cballs.png | openmp                  | clang -Ofast -march=native -mavx2 | 0.002267 |
| cballs.png | use intrinsics + inline | clang -Ofast -march=native -mavx2 | 0.001788 |
| cballs.png | use intrinsics + inline | clang -O3 -march=native -mavx2    | 0.003154 |
| cballs.png | use intrinsics + inline | clang -O3                         | 0.003222 |
| cballs.png | use intrinsics + inline | clang -O0                         | 0.006216 |
| cballs.png | reduce memcpy           | clang -O3 -march=native -mavx2    | 0.005254 |
| cballs.png | reduce memcpy           | clang -O3                         | 0.005410 |
| cballs.png | slide window            | clang -O3 -march=native -mavx2    | 0.005357 |
| cballs.png | slide window            | clang -O3                         | 0.005987 |
| cballs.png | separate kernel         | clang -O3                         | 0.028168 |

On my machine, the best result is ~30 cycles per pixel. Is it good or
bad?  I don't know.  This number also seems to increase when the image
gets larger.  If the image is 3840x2160, it will take ~100 cycles per
pixel.  Probably due to bad locality.

OpenMP does not perform well on smaller images, as expected.  However,
it substantially improves the performance on large images, to
something like 10ns per px.

** Memory access

| box blur |     time |
|----------+----------|
| h1       | 0.027939 |
| t1       | 0.097074 |
| h2       | 0.015752 |
| t2       | 0.098655 |
| h3       | 0.015984 |
| t3       | 0.087203 |

=fast_gaussian_blur_transpose.c= tries to solve the locality issue by
transposing the output matrix.  On a 4634x3091 image with openmp
enabled this gives 10% speedup:

- before: 0.144s
- after:  0.126s


=box_blur_1d= penalizes horizontal blurring, but accelerates vertical
blurring.  So... Yet another trade-off.

** Comparison with OpenCV

OpenCV is blazingly fast for large images (<3ns per pixel).  It is
slower on small images like =cballs.png=.
