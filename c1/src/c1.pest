WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ ANY ~ NEWLINE }



///
/// lex
///
identifier = @{ ("_" | ASCII_ALPHA) ~ ASCII_ALPHANUMERIC* }
number = { floatconst | intconst }
intconst = @{
      ("0x" | "0X") ~ (ASCII_DIGIT | 'a'..'f' | 'A'..'F')+
    | "0" ~ ('0'..'7')*
    | ('0'..'9')+
}
floatconst = @{
      digit_seq ~ "." ~ digit_seq?
    | "." ~ digit_seq
}
digit_seq = _{
    ('0'..'9')+
}


///
/// grammar
///
file = { SOI ~ ( decl | funcdef )+ ~ EOI }

// Declarations
decl = { constdecl | vardecl }

vardecl = { ("int" | "float") ~ vardef ~ ("," ~ vardef)* ~ ";" }
vardef = {
      identifier ~ "=" ~ exp
    | identifier ~ "[" ~ "]" ~ "=" ~ initializer_list
    | identifier ~ "[" ~ exp ~ "]"
    | identifier ~ "[" ~ exp ~ "]" ~ "=" ~ initializer_list
    | identifier
}

constdecl = { "const" ~ ("int" | "float") ~ constdef ~ ("," ~ constdef)* ~ ";" }
constdef = {
      identifier ~ "=" ~ exp
    | identifier ~ "[" ~ "]" ~ "=" ~ "{" ~ exp ~ ("," ~ exp)* ~ "}"
    | identifier ~ "[" ~ exp ~ "]" ~ "=" ~ "{" ~ exp ~ ("," ~ exp)* ~"}"
}

initializer_list = {
    "{" ~ exp ~ ("," ~ exp)* ~ "}"
}


// Function & block
funcdef = { "void" ~ identifier ~ "(" ~ ")" ~ block }
block = { "{" ~ (decl | stmt)* ~ "}" }

// Statement
stmt = {
      block
    | assignment ~ ";"
    | funcall ~ ";"
    | ifstmt
    | whilestmt
    | ";"
}
assignment = { lval ~ "=" ~ exp }
funcall = { identifier ~ "(" ~ ")" }
ifstmt = { "if" ~ "(" ~ cond ~ ")" ~ stmt ~ ("else" ~ stmt)? }
whilestmt = { "while" ~ "(" ~ cond ~ ")" ~ stmt }
lval = { identifier | identifier ~ "[" ~ exp ~ "]" }
cond = { exp ~ ("==" | "!=" | "<" | "<=" | ">" | ">=") ~ exp }

// Expression
operation = _{ add | sub | mult | div | pow }
add = { "+" }
sub = { "-" }
mult = { "*" }
div = { "/" }
pow = { "^" }

exp = { term ~ (operation ~ term)* }
term = _{ lval | number | "(" ~ exp ~ ")" }
